#!/usr/bin/env python3

import argparse
import time
import os
from os.path import split, splitext, join
from shutil import copyfile
from pygments.lexers import get_lexer_by_name, guess_lexer_for_filename

from modules.formatter import EFormatter
from modules.print_utils import print_error, print_highlight
from modules.languages import LANGUAGES
from modules.process import preprocess_file, process_file
from modules.html_templates import DOCUMENT_TEMPLATE
from modules.styles import STYLES


VERSION = "elucipy -- version 0.1 (May 2020)"
EPILOG = """Federico Maria Guercilena
(fguercilena@theorie.ikp.physik.tu-darmstadt.de)"""
DESCRIPTION = """Generate a .html document showing the source code of the
input files, with a parallel explanation running along it,
generated from the comments in the code."""


def main():

    # Parse command line arguments
    cl_parsr = argparse.ArgumentParser(add_help=True, epilog=EPILOG,
                                       description=DESCRIPTION)

    cl_parsr.add_argument("--version", action="version", version=VERSION,
                          help="print version information and exit")

    cl_parsr.add_argument("filenames", nargs='+', help="input file(s) path")
    cl_parsr.add_argument("-l", "--language", default=None, dest="lang",
                          choices=list(LANGUAGES),
                          help="programming language of the input files")
    cl_parsr.add_argument("-c", "--ctags", default=False, dest="ctags",
                          action="store_true",
                          help="use ctags to annotate the code")
    cl_parsr.add_argument("-s", "--style", default="default", dest="style",
                          choices=list(STYLES),
                          help="syntax highlight style")
    cl_parsr.add_argument("--ignore-linebreaks", default=False,
                          action="store_true", dest="ignore_lb",
                          help="ignore linebreaks in explanations")
    cl_parsr.add_argument("-o", "--out-directory", default=None, dest="outdir",
                          help="output directory")
    cl_parsr.add_argument("-q", "--quiet", default=False, action="store_true",
                          dest="quiet", help="quiet mode")

    args = cl_parsr.parse_args()

    if not args.quiet:
        start = time.time()

    # Setup the formatter
    formatter = EFormatter(full=False,
                           encoding="utf-8",
                           outencoding="utf-8",
                           linenos="inline", linenostart=1,
                           linenostep=1, lineanchors="line",
                           anchorlinenos=True, lineseparator="<br>",
                           ctags=args.ctags, files=args.filenames)

    # Set up the lexer, guessing the language if necessary
    if args.lang is not None:
        lexer = get_lexer_by_name(args.lang, stripnl=False, stripall=False,
                                  ensurenl=True, encoding="utf-8",
                                  tabsize=LANGUAGES[args.lang].tabsize)

    else:
        with open(args.filenames[0], 'r') as i:
            content = i.read()

        lexer = guess_lexer_for_filename(args.filenames[0], content,
                                         stripnl=False, stripall=False,
                                         ensurenl=True, encoding="utf-8")
        args.lang = lexer.name.lower()

        if args.lang not in LANGUAGES:
            print_error("Unsupported language (pygments guessed "
                        f"the language as '{args.lang:s}')")

        lexer.tabsize = LANGUAGES[args.lang].tabsize

    # Get the path to the style .css file
    script_dir = os.path.dirname(os.path.realpath(__file__))
    in_style_path = join(script_dir, "modules/styles", f"{args.style:s}.css")

    if not args.quiet:
        print(f"Processing input as '{args.lang:s}' files.\n")

    # Main loop over the input files
    for filename in args.filenames:

        with open(filename, 'r') as input_file:
            content = input_file.read()

        directory, filename = split(filename)
        filename_base = splitext(filename)[0]

        if args.outdir is not None:
            directory = args.outdir

        process, content, title, intro = preprocess_file(content, filename,
                                                         LANGUAGES[args.lang])

        if not process:
            if not args.quiet:
                print(f"Nothing to do for {filename:s}")
            continue

        if not args.quiet:
            print(f"Processing {filename:s}... ", end="")

        out = process_file(content, LANGUAGES[args.lang], lexer, formatter,
                           args.ignore_lb)

        out = DOCUMENT_TEMPLATE.format(title, args.style, intro, out)

        outfile_path = join(directory, f"{filename_base:s}.html")
        with open(outfile_path, 'w') as output_file:
            output_file.write(out)

        out_style_path = join(directory, f"{args.style:s}.css")
        copyfile(in_style_path, out_style_path)

        if not args.quiet:
            print("Done.")

    if not args.quiet:
        stop = time.time()

        total = stop - start

        print("")
        print_highlight("All done!")
        print("")

        tmsg = f"Processed {len(args.filenames):d} files in {total:f} seconds"
        print("-"*len(tmsg))
        print(tmsg)


if __name__ == "__main__":
    main()
else:
    print_error("elucipy is not meant to be imported!")
